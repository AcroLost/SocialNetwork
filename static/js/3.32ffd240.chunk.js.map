{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileStatus.js","components/Profile/ProfileInfo/ProfileDataForm.js","components/Profile/ProfileInfo/ProfileData.js","components/Profile/ProfileInfo/ProfileInfo.js","components/Profile/MyPosts/Post/Post.js","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.js","components/Profile/MyPosts/MyPosts.js","components/Profile/MyPosts/MyPostsContainer.js","components/Profile/Profile.js","components/Profile/ProfileContainer.js"],"names":["module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","ProfileStatus","props","useState","status","setStatus","editMode","setEditMode","useEffect","isOwner","autoFocus","onBlur","updateUserStatus","onChange","event","target","placeholder","className","s","onClick","statusOther","ProfileDataForm","handleSubmit","profile","error","onSubmit","description","style","errorBlock","createField","Input","type","Textarea","padding","background","border","cursor","marginLeft","keys","contacts","map","key","contact","reduxForm","form","ProfileData","onEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","profileInfo","profilePhoto","src","photos","large","userPhoto","alt","marginTop","files","initialValues","Post","message","likesCount","item","small","fontSize","maxLength15","maxLength","AddNewPostForm","Field","width","name","component","validate","required","MyPosts","React","memo","profilePage","addPost","postsData","posts","id","postsBlock","values","postText","MyPostsContainer","connect","state","dispatch","addPostActionCreator","Profile","formData","then","display","justifyContent","alignItems","height","size","ProfileContainer","userId","this","match","params","history","setUserProfile","setUserStatusThunk","uploadProfile","prevProps","savePhotoThunk","updateUserStatusThunk","saveProfileThunk","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.32ffd240.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__3ItUV\",\"profilePhoto\":\"ProfileInfo_profilePhoto__1zFIr\",\"status\":\"ProfileInfo_status__z0yvy\",\"statusOther\":\"ProfileInfo_statusOther__2ph7X\",\"contact\":\"ProfileInfo_contact__1E7Fp\",\"description\":\"ProfileInfo_description__20gap\",\"fullName\":\"ProfileInfo_fullName__3fERD\",\"aboutMe\":\"ProfileInfo_aboutMe__36p4Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__17qAL\",\"posts\":\"MyPosts_posts__RvDT0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3bFxP\"};","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useEffect } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatus = (props) => {\r\n\r\n    const [status, setStatus] = useState(props.status);\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const changeStatus = (event) => {\r\n        setStatus(event.target.value)\r\n    }\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateMode = () => {\r\n\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <b>Статус:</b>\r\n            {props.isOwner\r\n\r\n                ? !editMode\r\n\r\n                    ? <span className={s.status}\r\n                        onClick={activateMode}> {props.status || \"Status will be here\"}</span>\r\n\r\n                    : <input autoFocus\r\n                        onBlur={deactivateMode}\r\n                        value={status}\r\n                        onChange={changeStatus}\r\n                        placeholder=\"Status will be here\" />\r\n\r\n                : <span className={s.statusOther}>\r\n                    {props.status || \"Status will be here\"}\r\n                </span>\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatus;\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { createField, Input, Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { reduxForm } from 'redux-form';\r\nimport s from './ProfileInfo.module.css';\r\nimport style from '../../common/FormsControls/FormsControls.module.css';\r\n\r\n\r\nlet ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={s.description}>\r\n\r\n            {error &&\r\n                <div className={style.errorBlock}>\r\n                    {error}\r\n                </div>\r\n            }\r\n            <div>\r\n                <p><b>Имя:</b> {createField(\"Full name\", \"fullName\", [], Input)} </p>\r\n\r\n                <p><b>В поиске работы:</b> {createField(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}</p>\r\n\r\n                <p><b>Профессиональные навыки:</b> {createField(\"My proffesionals skills\", \"lookingForAJobDescription\", [], Textarea)}</p>\r\n\r\n                <p><b>О себе:</b> {createField(\"About me\", \"aboutMe\", [], Textarea)}</p>\r\n\r\n                <button style={{\r\n                    padding: '3px 40px',\r\n                    background: 'white',\r\n                    border: '1px solid gray',\r\n                    cursor: 'pointer'\r\n                }}>Сохранить\r\n                </button>\r\n\r\n            </div>\r\n            <div style={{ marginLeft: 180 }}>\r\n                <b>Контакты:</b> {Object.keys(profile.contacts).map((key) => {\r\n\r\n                    return <div className={s.contact}>\r\n\r\n                        <p><b>{key}:</b> {createField(key, \"contacts.\" + key, [], Input)}</p>\r\n\r\n                    </div>\r\n                })}\r\n            </div>\r\n\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ProfileDataForm = reduxForm({ form: 'profile-edit' })(ProfileDataForm);","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport { Button } from 'antd';\r\n\r\nconst ProfileData = ({ profile, isOwner, onEditMode }) => {\r\n\r\n    return <div className={s.description}>\r\n\r\n        <div>\r\n            <p className={s.fullName}>{profile.fullName}</p>\r\n            <p><b>В поиске работы:</b> {profile.lookingForAJob ? \"да\" : \"нет\"}</p>\r\n\r\n            {profile.lookingForAJob &&\r\n                <p>\r\n                    <b>Профессиональные навыки:</b> {profile.lookingForAJobDescription}\r\n                </p>\r\n            }\r\n\r\n            <p className={s.aboutMe}><b>О себе:</b> {profile.aboutMe}</p>\r\n\r\n            {isOwner && <Button type=\"default\" onClick={onEditMode}>Редактировать описание </Button>}\r\n        </div>\r\n        <div style={{ marginLeft: 100 }}>\r\n            <div>\r\n                <b>Контакты:</b> {Object.keys(profile.contacts).map((key) => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n                })}\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ProfileData;\r\n\r\nexport const Contact = ({ contactTitle, contactValue }) => {\r\n    return (\r\n        <p className={s.contact}><b>{contactTitle}:</b> {contactValue}</p>\r\n    );\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\nimport userPhoto from '../../../image/ava.jpg';\r\nimport ProfileStatus from './ProfileStatus';\r\nimport ProfileDataForm from './ProfileDataForm';\r\nimport ProfileData from './ProfileData';\r\n\r\nconst ProfileInfo = ({ savePhoto, isOwner, profile, updateUserStatus, status, saveProfile, onEditMode, onSubmit, editMode }) => {\r\n\r\n  const onPhotoSelect = (event) => {\r\n    if (event.target.files.length) {\r\n      savePhoto(event.target.files[0])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={s.profileInfo}>\r\n      <div>\r\n        <div className={s.profilePhoto}>\r\n          <img src={profile.photos.large || userPhoto} alt=\"ava\" />\r\n        </div>\r\n        <div style={{ marginTop: 5 }}>\r\n\r\n          {isOwner && <input type=\"file\" onChange={onPhotoSelect} />}\r\n\r\n        </div>\r\n      </div>\r\n      <div style={{ marginLeft: 10 }}>\r\n        <ProfileStatus updateUserStatus={updateUserStatus}\r\n          status={status}\r\n          isOwner={isOwner} />\r\n        <div>\r\n\r\n          {editMode\r\n\r\n            ? <ProfileDataForm initialValues={profile}\r\n              profile={profile}\r\n              onSubmit={onSubmit} />\r\n\r\n            : <ProfileData profile={profile}\r\n              isOwner={isOwner}\r\n              onEditMode={onEditMode}\r\n            />}\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nimport userPhoto from '../../../../image/ava.jpg';\r\n\r\nconst Post = ({ message, likesCount, profile }) => {\r\n\r\n  return (\r\n    <div className={s.item}>\r\n      <img src={profile.photos.small || userPhoto} alt='ava' />\r\n      <span style={{ fontSize: 15, marginLeft: 10 }}>{message}</span>\r\n      <div>\r\n        <span>like: {likesCount}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { required, maxLength } from '../../../../utils/validators/validators';\r\n\r\nimport { Textarea } from '../../../common/FormsControls/FormsControls';\r\n\r\n\r\n\r\nconst maxLength15 = maxLength(15);\r\n\r\nlet AddNewPostForm = (props) => {\r\n\r\n    return (\r\n\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field style={{ width: 300 }}\r\n                    name='postText'\r\n                    component={Textarea}\r\n                    validate={[required, maxLength15]}\r\n                    placeholder='Введите текст поста' />\r\n            </div>\r\n\r\n            <button style={\r\n                {\r\n                    padding: '3px 20px',\r\n                    background: 'white',\r\n                    border: '1px solid gray',\r\n                    cursor: 'pointer'\r\n                }}>\r\n                Добавить пост\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default AddNewPostForm = reduxForm({ form: 'addNewPostForm' })(AddNewPostForm);","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport AddNewPostForm from './AddNewPostForm/AddNewPostForm';\r\n\r\nconst MyPosts = React.memo(({ profilePage, addPost }) => {\r\n\r\n  const { postsData, profile } = profilePage;\r\n\r\n  const posts = postsData.map((item) => {\r\n    const { id, message, likesCount } = item;\r\n\r\n    return <Post key={id}\r\n      message={message}\r\n      likesCount={likesCount}\r\n      profile={profile} />\r\n  });\r\n\r\n  const onAddPost = (values) => {\r\n    addPost(values.postText);\r\n  }\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3 style={{ fontSize: 22 }}>Мои записи</h3>\r\n\r\n      <AddNewPostForm onSubmit={onAddPost} />\r\n\r\n      <div className={s.posts}>\r\n        {posts}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default MyPosts;\r\n\r\n","import MyPosts from './MyPosts';\r\n\r\nimport { addPostActionCreator } from '../../../redux/profileReducer';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  return {\r\n    profilePage: state.profilePage\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\r\n  return {\r\n    addPost: (postText) => {\r\n      dispatch(addPostActionCreator(postText))\r\n    }\r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, { useState } from 'react';\r\n\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport { Spin } from 'antd';\r\n\r\n\r\nconst Profile = ({ saveProfile, savePhoto, profile, updateUserStatus, status, isOwner }) => {\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  const onEditMode = () => {\r\n    setEditMode(true);\r\n  }\r\n\r\n  const onSubmit = (formData) => {\r\n    saveProfile(formData)\r\n      .then(() => {\r\n        setEditMode(false);\r\n      })\r\n  }\r\n\r\n  if (!profile) {\r\n    return <Spin style={{\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      height: 300\r\n    }} size=\"large\" />\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <ProfileInfo savePhoto={savePhoto}\r\n        isOwner={isOwner}\r\n        profile={profile}\r\n        status={status}\r\n        updateUserStatus={updateUserStatus}\r\n        saveProfile={saveProfile}\r\n        onEditMode={onEditMode}\r\n        onSubmit={onSubmit}\r\n        editMode={editMode} />\r\n\r\n      {!editMode &&\r\n        <MyPostsContainer />\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './Profile';\r\nimport { setUserProfile, setUserStatusThunk, updateUserStatusThunk, savePhotoThunk, saveProfileThunk } from '../../redux/profileReducer';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends Component {\r\n\r\n    uploadProfile() {\r\n        let userId = this.props.match.params.userId;\r\n\r\n        if (!userId) {\r\n            userId = this.props.userId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.setUserProfile(userId);\r\n        this.props.setUserStatusThunk(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.uploadProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.match.params.userId !== this.props.match.params.userId) {\r\n            this.uploadProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile savePhoto={this.props.savePhotoThunk}\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateUserStatus={this.props.updateUserStatusThunk}\r\n                saveProfile={this.props.saveProfileThunk} />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        userId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,\r\n        { setUserProfile, setUserStatusThunk, updateUserStatusThunk, savePhotoThunk, saveProfileThunk }),\r\n\r\n    withRouter\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}